
const provider = new Web3.providers.HttpProvider('https://sepolia.infura.io/v3/<TON_PROJECT_ID>');
const web3 = new Web3(provider);let account;
let contract; // Déclarez la variable contract à l'échelle globale
// Récupérer l'ABI et le bytecode du contrat (assurez-vous que les fichiers sont dans le même répertoire)
const abi = [ 
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_name",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_symbol",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "_initialSupply",
        "type": "uint256"
      },
      {
        "internalType": "uint8",
        "name": "decimals_",
        "type": "uint8"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "owner",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "Approval",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "creator",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "string",
        "name": "name",
        "type": "string"
      },
      {
        "indexed": false,
        "internalType": "string",
        "name": "symbol",
        "type": "string"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "supply",
        "type": "uint256"
      }
    ],
    "name": "TokenCreated",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "owner",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "spender",
        "type": "address"
      }
    ],
    "name": "allowance",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "approve",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "account",
        "type": "address"
      }
    ],
    "name": "balanceOf",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "subtractedValue",
        "type": "uint256"
      }
    ],
    "name": "decreaseAllowance",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "spender",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "addedValue",
        "type": "uint256"
      }
    ],
    "name": "increaseAllowance",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "tokens",
    "outputs": [
      {
        "internalType": "string",
        "name": "name",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "symbol",
        "type": "string"
      },
      {
        "internalType": "address",
        "name": "tokenAddress",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "from",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "to",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "transferFrom",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "amount",
        "type": "uint256"
      }
    ],
    "name": "burn",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "account",
        "type": "address"
      }
    ],
    "name": "getBalanceInDecimals",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "account",
        "type": "address"
      }
    ],
    "name": "getBalanceInWei",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [],
    "name": "getTokens",
    "outputs": [
      {
        "components": [
          {
            "internalType": "string",
            "name": "name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "symbol",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "tokenAddress",
            "type": "address"
          }
        ],
        "internalType": "struct UserToken.TokenInfo[]",
        "name": "",
        "type": "tuple[]"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [
      {
        "internalType": "uint8",
        "name": "",
        "type": "uint8"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  }];
const bytecode = "0x60806040523480156200001157600080fd5b5060405162002cb438038062002cb48339818101604052810190620000379190620005a7565b838381600390816200004a919062000898565b5080600490816200005c919062000898565b50505033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560146101000a81548160ff021916908360ff16021790555060008160ff16600a620000cf919062000b02565b83620000dc919062000b53565b9050620000f033826200022460201b60201c565b600660405180606001604052808781526020018681526020013073ffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001908162000163919062000898565b5060208201518160010190816200017b919062000898565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050503373ffffffffffffffffffffffffffffffffffffffff167f75d1eb2d61d7e210835bc16e78ac4d0e4f905c108a81852a6b68c4d46b4f40f3868686604051620002119392919062000c01565b60405180910390a2505050505062000d16565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000296576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200028d9062000c9c565b60405180910390fd5b620002aa600083836200039160201b60201c565b8060026000828254620002be919062000cbe565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000371919062000cf9565b60405180910390a36200038d600083836200039660201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200040482620003b9565b810181811067ffffffffffffffff82111715620004265762000425620003ca565b5b80604052505050565b60006200043b6200039b565b9050620004498282620003f9565b919050565b600067ffffffffffffffff8211156200046c576200046b620003ca565b5b6200047782620003b9565b9050602081019050919050565b60005b83811015620004a457808201518184015260208101905062000487565b60008484015250505050565b6000620004c7620004c1846200044e565b6200042f565b905082815260208101848484011115620004e657620004e5620003b4565b5b620004f384828562000484565b509392505050565b600082601f830112620005135762000512620003af565b5b815162000525848260208601620004b0565b91505092915050565b6000819050919050565b62000543816200052e565b81146200054f57600080fd5b50565b600081519050620005638162000538565b92915050565b600060ff82169050919050565b620005818162000569565b81146200058d57600080fd5b50565b600081519050620005a18162000576565b92915050565b60008060008060808587031215620005c457620005c3620003a5565b5b600085015167ffffffffffffffff811115620005e557620005e4620003aa565b5b620005f387828801620004fb565b945050602085015167ffffffffffffffff811115620006175762000616620003aa565b5b6200062587828801620004fb565b9350506040620006388782880162000552565b92505060606200064b8782880162000590565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620006aa57607f821691505b602082108103620006c057620006bf62000662565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200072a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620006eb565b620007368683620006eb565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000779620007736200076d846200052e565b6200074e565b6200052e565b9050919050565b6000819050919050565b620007958362000758565b620007ad620007a48262000780565b848454620006f8565b825550505050565b600090565b620007c4620007b5565b620007d18184846200078a565b505050565b5b81811015620007f957620007ed600082620007ba565b600181019050620007d7565b5050565b601f82111562000848576200081281620006c6565b6200081d84620006db565b810160208510156200082d578190505b620008456200083c85620006db565b830182620007d6565b50505b505050565b600082821c905092915050565b60006200086d600019846008026200084d565b1980831691505092915050565b60006200088883836200085a565b9150826002028217905092915050565b620008a38262000657565b67ffffffffffffffff811115620008bf57620008be620003ca565b5b620008cb825462000691565b620008d8828285620007fd565b600060209050601f831160018114620009105760008415620008fb578287015190505b6200090785826200087a565b86555062000977565b601f1984166200092086620006c6565b60005b828110156200094a5784890151825560018201915060208501945060208101905062000923565b868310156200096a578489015162000966601f8916826200085a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111562000a0d57808604811115620009e557620009e46200097f565b5b6001851615620009f55780820291505b808102905062000a0585620009ae565b9450620009c5565b94509492505050565b60008262000a28576001905062000afb565b8162000a38576000905062000afb565b816001811462000a51576002811462000a5c5762000a92565b600191505062000afb565b60ff84111562000a715762000a706200097f565b5b8360020a91508482111562000a8b5762000a8a6200097f565b5b5062000afb565b5060208310610133831016604e8410600b841016171562000acc5782820a90508381111562000ac65762000ac56200097f565b5b62000afb565b62000adb8484846001620009bb565b9250905081840481111562000af55762000af46200097f565b5b81810290505b9392505050565b600062000b0f826200052e565b915062000b1c836200052e565b925062000b4b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000a16565b905092915050565b600062000b60826200052e565b915062000b6d836200052e565b925082820262000b7d816200052e565b9150828204841483151762000b975762000b966200097f565b5b5092915050565b600082825260208201905092915050565b600062000bbc8262000657565b62000bc8818562000b9e565b935062000bda81856020860162000484565b62000be581620003b9565b840191505092915050565b62000bfb816200052e565b82525050565b6000606082019050818103600083015262000c1d818662000baf565b9050818103602083015262000c33818562000baf565b905062000c44604083018462000bf0565b949350505050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000c84601f8362000b9e565b915062000c918262000c4c565b602082019050919050565b6000602082019050818103600083015262000cb78162000c75565b9050919050565b600062000ccb826200052e565b915062000cd8836200052e565b925082820190508082111562000cf35762000cf26200097f565b5b92915050565b600060208201905062000d10600083018462000bf0565b92915050565b611f8e8062000d266000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80634f64b2be116100a257806395d89b411161007157806395d89b41146102f6578063a457c2d714610314578063a9059cbb14610344578063aa6ca80814610374578063dd62ed3e146103925761010b565b80634f64b2be146102465780636d8c428d1461027857806370a08231146102a85780638da5cb5b146102d85761010b565b8063313ce567116100de578063313ce567146101ac57806339509351146101ca5780633965b065146101fa57806342966c681461022a5761010b565b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015e57806323b872dd1461017c575b600080fd5b6101186103c2565b6040516101259190611265565b60405180910390f35b61014860048036038101906101439190611320565b610454565b604051610155919061137b565b60405180910390f35b610166610477565b60405161017391906113a5565b60405180910390f35b610196600480360381019061019191906113c0565b610481565b6040516101a3919061137b565b60405180910390f35b6101b46104b0565b6040516101c1919061142f565b60405180910390f35b6101e460048036038101906101df9190611320565b6104c7565b6040516101f1919061137b565b60405180910390f35b610214600480360381019061020f919061144a565b6104fe565b60405161022191906113a5565b60405180910390f35b610244600480360381019061023f9190611477565b610536565b005b610260600480360381019061025b9190611477565b6105b5565b60405161026f939291906114b3565b60405180910390f35b610292600480360381019061028d919061144a565b61071f565b60405161029f91906113a5565b60405180910390f35b6102c260048036038101906102bd919061144a565b610731565b6040516102cf91906113a5565b60405180910390f35b6102e0610779565b6040516102ed91906114f8565b60405180910390f35b6102fe61079f565b60405161030b9190611265565b60405180910390f35b61032e60048036038101906103299190611320565b610831565b60405161033b919061137b565b60405180910390f35b61035e60048036038101906103599190611320565b6108a8565b60405161036b919061137b565b60405180910390f35b61037c6108cb565b6040516103899190611685565b60405180910390f35b6103ac60048036038101906103a791906116a7565b610aa4565b6040516103b991906113a5565b60405180910390f35b6060600380546103d190611716565b80601f01602080910402602001604051908101604052809291908181526020018280546103fd90611716565b801561044a5780601f1061041f5761010080835404028352916020019161044a565b820191906000526020600020905b81548152906001019060200180831161042d57829003601f168201915b5050505050905090565b60008061045f610b2b565b905061046c818585610b33565b600191505092915050565b6000600254905090565b60008061048c610b2b565b9050610499858285610cfc565b6104a4858585610d88565b60019150509392505050565b6000600560149054906101000a900460ff16905090565b6000806104d2610b2b565b90506104f38185856104e48589610aa4565b6104ee9190611776565b610b33565b600191505092915050565b60008061050a83610731565b90506105146104b0565b60ff16600a61052391906118dd565b8161052e9190611957565b915050919050565b60006105406104b0565b60ff16600a61054f91906118dd565b8261055a9190611988565b90508061056633610731565b10156105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e90611a3c565b60405180910390fd5b6105b13382610ffe565b5050565b600681815481106105c557600080fd5b90600052602060002090600302016000915090508060000180546105e890611716565b80601f016020809104026020016040519081016040528092919081815260200182805461061490611716565b80156106615780601f1061063657610100808354040283529160200191610661565b820191906000526020600020905b81548152906001019060200180831161064457829003601f168201915b50505050509080600101805461067690611716565b80601f01602080910402602001604051908101604052809291908181526020018280546106a290611716565b80156106ef5780601f106106c4576101008083540402835291602001916106ef565b820191906000526020600020905b8154815290600101906020018083116106d257829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b600061072a82610731565b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600480546107ae90611716565b80601f01602080910402602001604051908101604052809291908181526020018280546107da90611716565b80156108275780601f106107fc57610100808354040283529160200191610827565b820191906000526020600020905b81548152906001019060200180831161080a57829003601f168201915b5050505050905090565b60008061083c610b2b565b9050600061084a8286610aa4565b90508381101561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690611ace565b60405180910390fd5b61089c8286868403610b33565b60019250505092915050565b6000806108b3610b2b565b90506108c0818585610d88565b600191505092915050565b60606006805480602002602001604051908101604052809291908181526020016000905b82821015610a9b578382906000526020600020906003020160405180606001604052908160008201805461092290611716565b80601f016020809104026020016040519081016040528092919081815260200182805461094e90611716565b801561099b5780601f106109705761010080835404028352916020019161099b565b820191906000526020600020905b81548152906001019060200180831161097e57829003601f168201915b505050505081526020016001820180546109b490611716565b80601f01602080910402602001604051908101604052809291908181526020018280546109e090611716565b8015610a2d5780601f10610a0257610100808354040283529160200191610a2d565b820191906000526020600020905b815481529060010190602001808311610a1057829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906108ef565b50505050905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ba2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9990611b60565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0890611bf2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610cef91906113a5565b60405180910390a3505050565b6000610d088484610aa4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d825781811015610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90611c5e565b60405180910390fd5b610d818484848403610b33565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610df7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dee90611cf0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d90611d82565b60405180910390fd5b610e718383836111cb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90611e14565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610fe591906113a5565b60405180910390a3610ff88484846111d0565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361106d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106490611ea6565b60405180910390fd5b611079826000836111cb565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f690611f38565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111b291906113a5565b60405180910390a36111c6836000846111d0565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561120f5780820151818401526020810190506111f4565b60008484015250505050565b6000601f19601f8301169050919050565b6000611237826111d5565b61124181856111e0565b93506112518185602086016111f1565b61125a8161121b565b840191505092915050565b6000602082019050818103600083015261127f818461122c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112b78261128c565b9050919050565b6112c7816112ac565b81146112d257600080fd5b50565b6000813590506112e4816112be565b92915050565b6000819050919050565b6112fd816112ea565b811461130857600080fd5b50565b60008135905061131a816112f4565b92915050565b6000806040838503121561133757611336611287565b5b6000611345858286016112d5565b92505060206113568582860161130b565b9150509250929050565b60008115159050919050565b61137581611360565b82525050565b6000602082019050611390600083018461136c565b92915050565b61139f816112ea565b82525050565b60006020820190506113ba6000830184611396565b92915050565b6000806000606084860312156113d9576113d8611287565b5b60006113e7868287016112d5565b93505060206113f8868287016112d5565b92505060406114098682870161130b565b9150509250925092565b600060ff82169050919050565b61142981611413565b82525050565b60006020820190506114446000830184611420565b92915050565b6000602082840312156114605761145f611287565b5b600061146e848285016112d5565b91505092915050565b60006020828403121561148d5761148c611287565b5b600061149b8482850161130b565b91505092915050565b6114ad816112ac565b82525050565b600060608201905081810360008301526114cd818661122c565b905081810360208301526114e1818561122c565b90506114f060408301846114a4565b949350505050565b600060208201905061150d60008301846114a4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061155b826111d5565b611565818561153f565b93506115758185602086016111f1565b61157e8161121b565b840191505092915050565b611592816112ac565b82525050565b600060608301600083015184820360008601526115b58282611550565b915050602083015184820360208601526115cf8282611550565b91505060408301516115e46040860182611589565b508091505092915050565b60006115fb8383611598565b905092915050565b6000602082019050919050565b600061161b82611513565b611625818561151e565b9350836020820285016116378561152f565b8060005b85811015611673578484038952815161165485826115ef565b945061165f83611603565b925060208a0199505060018101905061163b565b50829750879550505050505092915050565b6000602082019050818103600083015261169f8184611610565b905092915050565b600080604083850312156116be576116bd611287565b5b60006116cc858286016112d5565b92505060206116dd858286016112d5565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061172e57607f821691505b602082108103611741576117406116e7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611781826112ea565b915061178c836112ea565b92508282019050808211156117a4576117a3611747565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115611801578086048111156117dd576117dc611747565b5b60018516156117ec5780820291505b80810290506117fa856117aa565b94506117c1565b94509492505050565b60008261181a57600190506118d6565b8161182857600090506118d6565b816001811461183e576002811461184857611877565b60019150506118d6565b60ff84111561185a57611859611747565b5b8360020a91508482111561187157611870611747565b5b506118d6565b5060208310610133831016604e8410600b84101617156118ac5782820a9050838111156118a7576118a6611747565b5b6118d6565b6118b984848460016117b7565b925090508184048111156118d0576118cf611747565b5b81810290505b9392505050565b60006118e8826112ea565b91506118f3836112ea565b92506119207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461180a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611962826112ea565b915061196d836112ea565b92508261197d5761197c611928565b5b828204905092915050565b6000611993826112ea565b915061199e836112ea565b92508282026119ac816112ea565b915082820484148315176119c3576119c2611747565b5b5092915050565b7f536f6c646520696e737566666973616e7420706f7572206365747465206f706560008201527f726174696f6e0000000000000000000000000000000000000000000000000000602082015250565b6000611a266026836111e0565b9150611a31826119ca565b604082019050919050565b60006020820190508181036000830152611a5581611a19565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611ab86025836111e0565b9150611ac382611a5c565b604082019050919050565b60006020820190508181036000830152611ae781611aab565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611b4a6024836111e0565b9150611b5582611aee565b604082019050919050565b60006020820190508181036000830152611b7981611b3d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bdc6022836111e0565b9150611be782611b80565b604082019050919050565b60006020820190508181036000830152611c0b81611bcf565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611c48601d836111e0565b9150611c5382611c12565b602082019050919050565b60006020820190508181036000830152611c7781611c3b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611cda6025836111e0565b9150611ce582611c7e565b604082019050919050565b60006020820190508181036000830152611d0981611ccd565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611d6c6023836111e0565b9150611d7782611d10565b604082019050919050565b60006020820190508181036000830152611d9b81611d5f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611dfe6026836111e0565b9150611e0982611da2565b604082019050919050565b60006020820190508181036000830152611e2d81611df1565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611e906021836111e0565b9150611e9b82611e34565b604082019050919050565b60006020820190508181036000830152611ebf81611e83565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611f226022836111e0565b9150611f2d82611ec6565b604082019050919050565b60006020820190508181036000830152611f5181611f15565b905091905056fea26469706673582212209c7639cbbb195b0040e301bdc1d79afc89eb945f089e28103400aa7d484bc37464736f6c63430008130033";  // Le bytecode de votre contracts





async function getAccount() {
  if (!account) {
    account = localStorage.getItem('userAccount') || await web3.eth.getAccounts()[0];
    if (!account) {
      alert("Aucun compte n'est connecté.");
      return null;
    }
    localStorage.setItem('userAccount', account);
  }
  return account;
}



// Fonction pour ajouter une entrée dans l'historique des transactions
function addToTransactionHistory(action, tokenSymbol, amount) {
  const transactionHistory = JSON.parse(localStorage.getItem('transactionHistory')) || [];
  
  const newEntry = {
      action: action, // "Émission" ou "Destruction"
      symbol: tokenSymbol,
      amount: amount,
      date: new Date().toLocaleString() // Date et heure actuelles
  };
  
  transactionHistory.push(newEntry);
  localStorage.setItem('transactionHistory', JSON.stringify(transactionHistory));
}

// Ajouter un token et le stocker dans localStorage
document.getElementById('createTokenForm').addEventListener('submit', async function (event) {
  event.preventDefault();

  const tokenName = document.getElementById('tokenName').value;
  const tokenSymbol = document.getElementById('tokenSymbol').value;
  const initialSupply = document.getElementById('initialSupply').value;
  const decimals = document.getElementById('decimals').value;

  try {
      const account = await getAccount();
      console.log('Compte utilisateur récupéré:', account);

      const userToken = new web3.eth.Contract(abi);
      console.log('Contrat préparé avec l\'ABI:', abi);

      const deployedContract = await userToken.deploy({
          data: bytecode,
          arguments: [tokenName, tokenSymbol, initialSupply, decimals]
      })
      .send({
          from: account,
          gas: 3000000,
          gasPrice: web3.utils.toWei('20', 'gwei'),
      });

      console.log('Token créé avec succès ! Adresse du contrat:', deployedContract.options.address);
      alert('Token créé avec succès à l\'adresse: ' + deployedContract.options.address);
      // Enregistrer l'action d'émission dans l'historique
      addToTransactionHistory("Émission", tokenSymbol, initialSupply);

      // Stocker le token dans localStorage
      let tokensList = JSON.parse(localStorage.getItem('tokensList')) || [];
      tokensList.push({
          name: tokenName,
          symbol: tokenSymbol,
          address: deployedContract.options.address
      });

      localStorage.setItem('tokensList', JSON.stringify(tokensList));
      loadTokens(); // Recharger la liste des tokens

      // Tentative d'ajout du token dans MetaMask
      console.log('Tentative d\'ajout du token à MetaMask...');
      try {
          const tokenAddress = deployedContract.options.address;
          const tokenDecimals = parseInt(decimals);

          const wasAdded = await window.ethereum.request({
              method: 'wallet_watchAsset',
              params: {
                  type: 'ERC20',
                  options: {
                      address: tokenAddress, // l'adresse du token
                      symbol: tokenSymbol,   // symbole du token
                      decimals: tokenDecimals, // décimales
                  },
              },
          });

          if (wasAdded) {
              console.log(`Le token ${tokenSymbol} a été ajouté à MetaMask avec succès.`);
              
          } else {
              console.log(`L'utilisateur a refusé d'ajouter le token ${tokenSymbol} à MetaMask.`);
          }
      } catch (watchAssetError) {
          console.error('Erreur lors de l\'ajout du token dans MetaMask:', watchAssetError);
          alert('Erreur lors de l\'ajout du token dans MetaMask.');
      }

  } catch (error) {
      console.error('Erreur lors du déploiement du contrat:', error);
      alert('Une erreur est survenue lors de la création du token.');
  }
});

// Charger les tokens depuis localStorage
async function loadTokens() {
    const tokensList = JSON.parse(localStorage.getItem('tokensList')) || [];
    const tokensListElement = document.getElementById('tokensList');
    tokensListElement.innerHTML = '';

    tokensList.forEach((token, index) => {
        const tokenElement = document.createElement('div');
        tokenElement.classList.add('token-item');
        
        tokenElement.innerHTML = `
            <strong>${token.name}</strong> (${token.symbol})
            <button class="button" onclick="viewBalance(${index})">Voir le solde</button>
            <button class="button" onclick="burnToken(${index})">Détruire</button>
            <button class="button" onclick="viewTokenAddress(${index})">Voir l'adresse</button>
        `;
        
        tokensListElement.appendChild(tokenElement);
    });
}

// Afficher l'adresse du token
function viewTokenAddress(index) {
    const tokensList = JSON.parse(localStorage.getItem('tokensList')) || [];
    const token = tokensList[index];
    alert('L\'adresse du token est : ' + token.address);
}

// Fonction de visualisation du solde
async function viewBalance(index) {
  const tokensList = JSON.parse(localStorage.getItem('tokensList')) || [];
  const token = tokensList[index];
  
  // Instanciez le contrat avec l'adresse correcte
  const tokenContract = new web3.eth.Contract(abi, token.address);

  try {
      // Assurez-vous que 'account' est une adresse valide
      const account = await getAccount();
      
      // Appel à la fonction getBalanceInDecimals
      const balance = await tokenContract.methods.getBalanceInDecimals(account).call();
      alert(`Solde de ${token.name}: ${balance}`);
  } catch (error) {
      console.error('Erreur lors de la récupération du solde :', error);
      alert('Erreur lors de la récupération du solde.');
  }
}


// Fonction pour détruire des tokens
async function burnToken(index) {
  const tokensList = JSON.parse(localStorage.getItem('tokensList')) || [];
  const token = tokensList[index];
  const amount = prompt(`Combien de ${token.symbol} voulez-vous détruire ?`);

  if (amount && !isNaN(amount) && parseFloat(amount) > 0) {
      try {
          const contract = new web3.eth.Contract(abi, token.address);
          const account = await getAccount();  // Utilisez la fonction getAccount() pour obtenir le compte stocké

          if (!account) return;  // Si aucun compte n'est trouvé, on arrête l'exécution

          await contract.methods.burn(amount).send({
              from: account,  // Utilisation du compte sélectionné
              gas: 3000000,
              gasPrice: web3.utils.toWei('20', 'gwei')
          });

          alert(`${amount} ${token.symbol} ont été détruits avec succès.`);
          loadTokens(); // Recharger la liste après destruction

          // Ajouter une entrée dans l'historique pour la destruction
          addToTransactionHistory("Destruction", token.symbol, amount);
      } catch (error) {
          console.error('Erreur lors de la destruction du token :', error);
          alert(`Erreur : ${error.message}`);
      }
  } else {
      alert("Quantité invalide.");
  }
}

// Fonction pour afficher l'historique des transactions
function displayTransactionHistory() {
  const transactionHistory = JSON.parse(localStorage.getItem('transactionHistory')) || [];
  const transactionHistoryDiv = document.getElementById('transactionHistory');
  
  // Vider le contenu précédent
  transactionHistoryDiv.innerHTML = '';

  if (transactionHistory.length === 0) {
      transactionHistoryDiv.innerHTML = '<p>Aucune transaction pour le moment.</p>';
      return;
  }

  // Créer une liste pour afficher les transactions
  const ul = document.createElement('ul');
  ul.style.listStyleType = 'none'; // Enlever les puces par défaut
  ul.style.padding = '0';

  // Inverser l'ordre des transactions pour afficher les plus récentes en haut
  transactionHistory.reverse().forEach(entry => {
      const li = document.createElement('li');
      li.style.display = 'flex';
      li.style.alignItems = 'center';
      li.style.marginBottom = '10px';

      // Choix de l'icône et couleur en fonction de l'action
      const icon = entry.action === "Émission" ? "🟢" : "🔴";
      const color = entry.action === "Émission" ? "#28a745" : "#dc3545";

      // Création de l'icône avec couleur
      const iconSpan = document.createElement('span');
      iconSpan.textContent = icon;
      iconSpan.style.fontSize = '1.5em';
      iconSpan.style.marginRight = '10px';
      iconSpan.style.color = color;

      // Texte de la transaction
      const textSpan = document.createElement('span');
      textSpan.innerHTML = `<strong>${entry.action}</strong> de ${entry.amount} ${entry.symbol} - ${entry.date}`;
      textSpan.style.color = '#555';

      // Ajout de l'icône et du texte à l'élément <li>
      li.appendChild(iconSpan);
      li.appendChild(textSpan);

      // Ajouter l'élément <li> à la liste <ul>
      ul.appendChild(li);
  });

  // Ajouter la liste <ul> au conteneur
  transactionHistoryDiv.appendChild(ul);
}

// Fonction pour basculer entre afficher et cacher l'historique
function toggleTransactionHistory() {
  const transactionHistoryDiv = document.getElementById('transactionHistory');
  const toggleButton = document.getElementById('toggleHistoryButton');

  if (transactionHistoryDiv.style.display === 'none') {
      displayTransactionHistory(); // Affiche l'historique si caché
      transactionHistoryDiv.style.display = 'block';
      toggleButton.textContent = 'Cacher l\'historique';
  } else {
      transactionHistoryDiv.style.display = 'none';
      toggleButton.textContent = 'Afficher l\'historique';
  }
}


// Appel de la fonction pour afficher l'historique
displayTransactionHistory();

// Charger les tokens au chargement de la page
window.onload = async () => {
    await getAccount();
    loadTokens();
};
